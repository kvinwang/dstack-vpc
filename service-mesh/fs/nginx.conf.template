events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'app_id="$app_id" cert_verify="$ssl_client_verify"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log info;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    upstream mesh_auth {
        server 127.0.0.1:8092;
        keepalive 32;
    }

    upstream backend_app {
        server ${BACKEND};
        keepalive 32;
    }

    upstream mesh_client {
        server 127.0.0.1:8091;
        keepalive 32;
    }

    server {
        listen 80;
        server_name _;

        location / {
            proxy_pass http://mesh_client;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Original-Method $request_method;
        }
    }

    # HTTPS server with mTLS
    server {
        listen 443 ssl;
        server_name _;

        # TLS configuration
        ssl_certificate     /etc/ssl/certs/server.crt;
        ssl_certificate_key /etc/ssl/private/server.key;
        # Enable client certificate verification
        ssl_client_certificate /etc/ssl/certs/ca.crt;
        ssl_verify_client optional_no_ca;
        ssl_verify_depth 3;

        # SSL settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA256;
        ssl_prefer_server_ciphers off;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Main proxy location with mTLS auth
        location / {
            # Auth endpoint for certificate verification
            auth_request /auth;

            # Extract headers from auth response
            auth_request_set $app_id $upstream_http_x_dstack_app_id;

            proxy_set_header X-Dstack-App-Id $app_id;

            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Forward to backend application
            proxy_pass http://backend_app;
        }

        # Internal auth endpoint for mTLS
        location = /auth {
            internal;
            access_log /var/log/nginx/auth.log main;
            error_log /var/log/nginx/auth_error.log info;

            proxy_pass http://mesh_auth/auth;
            proxy_set_header x-client-cert $ssl_client_escaped_cert;
            proxy_set_header x-client-verify $ssl_client_verify;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Original-Method $request_method;
        }
    }
}